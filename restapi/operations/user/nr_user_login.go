// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	_"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	middleware "github.com/go-openapi/runtime/middleware"
	"certbackend/models"
	"fmt"
	"certbackend/var"
)

// NrUserLoginHandlerFunc turns a function with the right signature into a user login handler
type NrUserLoginHandlerFunc func(NrUserLoginParams) middleware.Responder

// Handle executing the request and returning a response
func (fn NrUserLoginHandlerFunc) Handle(params NrUserLoginParams) middleware.Responder {
	return fn(params)
}

// NrUserLoginHandler interface for that can handle valid user login params
type NrUserLoginHandler interface {
	Handle(NrUserLoginParams) middleware.Responder
}

// NewNrUserLogin creates a new http.Handler for the user login operation
func NewNrUserLogin(ctx *middleware.Context, handler NrUserLoginHandler) *NrUserLogin {
	return &NrUserLogin{Context: ctx, Handler: handler}
}

/*NrUserLogin swagger:route GET /user/login User userLogin

登录接口

登录接口

*/
type NrUserLogin struct {
	Context *middleware.Context
	Handler NrUserLoginHandler
}

func (o *NrUserLogin) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewNrUserLoginParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	var ok UserLoginOK
	var response models.InlineResponse20029

	db,err := _var.OpenConnection()
	if err!=nil{
		fmt.Println(err.Error())
	}
	//query
	var user models.User
	db.Where("name=?","admin").First(&user)
	//data
	response.Data = &user

	//get routers from sql
	db1,err1 := _var.OpenConnection()
	if err1!=nil{
		fmt.Println(err1.Error())
	}
	//query
	var dynamicRouters [] models.DynamicRouter
	db1.Table("routers").Where(map[string]interface{}{"status":0}).Find(&dynamicRouters)

	for i:=0; i<len(dynamicRouters); i++  {
		var childrenRouters [] models.ChildrenRouter
		db1.Table("routers").Where(map[string]interface{}{"status":0}).Where("parent_id=?",dynamicRouters[i].ID).Find(&childrenRouters)
		fmt.Println("routerName is ",dynamicRouters[i].Name)
		dynamicRouters[i].Children = &childrenRouters
	}

	//data
	response.DynamicRouters = dynamicRouters


	//status
	var status models.Response
	status.UnmarshalBinary([]byte(_var.Response200(200,"ok")))
	response.Status = &status


	ok.SetPayload(&response)

	o.Context.Respond(rw, r, route.Produces, route, ok)

}
